#+TITLE: ソースコード講読 alter.c
#+AUTHOR: 井上優作
#+LANG: ja
#+OPTIONS: toc:nil num:nil

* ALTER TABLEについて

  SQLite3の ~ALTER TABLE~ コマンドは、テーブルの名前を変更するか、またはカラムを追加することができるコマンドである。以下のようにして実行する。

  #+BEGIN_SRC
ALTER TABLE tbl RENAME TO new_table_name
ALTER TABLE tbl ADD COLUMN column-def
  #+END_SRC

* ソースコード

  - L21: このファイルのコードは、ビルド時に ~ALTER TABLE~ コマンドを除かない限り存在する。

** LL.37-84 static void renameTableFunc

   コメント中にあるコード例の引数が、この関数の第3引数に配列( ~**argv~ )となって入っている。42-43行目で、SQL文とテーブルの名前が取り出されている。テーブル名の特定規則は、 ~TK_LP~ または ~TK_USING~ の後に続く最初のスペースでないトークンであるとしており、これを59−78行目で実行している。この関数自体は返り値は ~void~ だが、80行目の ~zRet~ が実質的な返り値？　

** LL.102-148 static void renameParentFunc

   外部キー制約の定義を修正するための関数。120−127行目で古い名前を探して、129−138行目でそれを新しい名前に変更しているような気がする。

** LL.158-224 static void renameTriggerFunc

   第1引数が ~CREATE TRIGGER~ 文，第2引数がテーブルの名前で，これが第3引数のテーブル名に置き換えられる． ~CREATE TRIGGER~ 文の中のテーブル名は ~TK_ON~ か ~TK_DOT~ と ~TK_WHEN~, ~TK_BEGIN~ または ~TK_FOR~ の間にあるトークンである．この規則に従って，181-215行目でテーブルの名前を特定している．今までに出てきた関数と違って，古い名前を新しい名前に置き換えているようなコードが見つからない．

** LL.230-247 void sqlite3AlterFunctions

   今までに定義した関数をグローバルな関数定義ハッシュテーブルに登録しているらしいということだけ分かった（L245の ~sqlite3FuncDefInsert~ は ~callback.c~:L304 で定義されている）．

** LL.265-274 static char *whereOrName

   複数のconstantを受け取って ~name=<constant1> OR name=<constant2> OR ...~ というフォーマットの文字列を返す関数．フォーマット指定子に使われている ~%Q~ は標準で実装されているものではない？　また，270行目だけ見ると，3つ以上のconstantがあるときにどうやって ~OR~ でつないだ文字列を返すのかが分からない．

** LL.283-290 char *whereForeignKeys

   上で定義した関数を使ってwhere句を返す関数． ~zWhere~ という1つの変数に代入し続けている． ~*whereOnName~ の返し方が再帰的になっている？

** LL.299-323 static char *whereTempTriggers

   全てのテンポラリートリガーを選択するwhere句文字列を生成するための関数．309-316行目でそれを生成して，317-322行目で返している？

** LL.333-372 void reloadTableSchema

   テーブルの内部表現を一旦削除して読み込み直す関数．341-345行でVDBEとデータベースを準備，347-353行目で内部スキーマからトリガーを削除，357行目でテーブルとインデックスを削除，360−362行目でテーブルを再読み込みしている．368-370行目では，もしテーブルがテンポラリーデータベースに無ければテンポラリートリガーを読み込む（？）．

** LL.382-388 static int isSystemTable

   与えられた名前のテーブルがシステムテーブルならエラーメッセージを残し0でない値を返す関数．383行目のifの条件の部分から， ~sqlite_~ から始まるテーブルがシステムテーブルであることが分かる．
